#use like this: cat file.txt | python script.py
import sys
for line in sys.stdin:
# do suff
print(line)
as
2-2
=1
import sys
reticulate::repl_python()
for line in sys.stdin:
# do suff
print(line)
2+2
import io
output = io.StringIO()
output.write('FIrst stream into the buffer. ')
print('Second stream.', file=output)
print(output.getvalue())
output.close()  # discard buffer memory
import io
# Writing to a buffer
output = io.StringIO()
output.write('FIrst stream into the buffer. ')
print('Second stream.', file=output)
print(output.getvalue())
output.close()  # discard buffer memory
input = io.StringIO('Inital value for read buffer')
# Read from the buffer
print(input.read())
print("Second read output:",input.read())
output.getvalue()
print(output.getvalue())
output = io.StringIO()
output.write('insert this input.')
print(file=output)
print('a',file=output)
print(output.getvalue())
input = io.StringIO('Inital value for read buffer')
print(input.read())
print("Second read output:",input.read())
print(input.read())
print('tets', input.read())
d = {'first': [1,"two"], 'second': set([3, 4, 'five'])}
import pickle
with open('dumpfile.pkl','wb') as fout:
pickle.dump(d, fout)
with open('dumpfile.pkl','rb') as fin:
d2 = pickle.load(fin)
print(d2)
import json
#json_string = json.dumps([1, 2, 3, "a", "b", "c"])
d = {'first': [1,"two"], 'second': [3, 4, 'five']}
json_string = json.dumps(d)
print(json_string)
import numpy as np
L = range(1000)
# %timeit [i**2 for i in L]
a = np.arange(1000)
# %timeit a**2
print(type(L[1]))
print(a.dtype)
import numpy as np
import numpy as np
reticulate::repl_python()
conda_list()
conda_list()
library(reticulate)
conda_list()
use_condaenv("r-adv-python", "/Users/cob-aaf/Library/r-miniconda/envs/r-adv-python/bin/python")
use_condaenv("r-adv-python", "/Users/cob-aaf/Library/r-miniconda/#nvs/r-adv-python/bin/python")
use_condaenv("r-adv-python", "/Users/cob-aaf/Library/r-miniconda/envs/r-adv-python/bin/python")
conda_install(packages = "numpy", envname = envname)
reticulate::repl_python()
py_config()
py_discover_config()
knitr::knit_engines$set()
knitr::knit_engines$get()
knitr::knit_engines$set(python=reticulate::eng_python
